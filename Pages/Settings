
import React, { useState, useEffect, useCallback } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Label } from '@/components/ui/label';
import { PlayerProfile } from '@/entities/all';
import { useNavigate } from 'react-router-dom';
import { createPageUrl } from '@/utils';
import { motion } from 'framer-motion';
import { ArrowLeft, Save, Key } from 'lucide-react';

export default function Settings() {
    const navigate = useNavigate();
    const [profile, setProfile] = useState(null);
    const [bindings, setBindings] = useState({
        up: 'w',
        down: 's',
        left: 'a',
        right: 'd',
        interact: 'e',
        jump: ' '
    });
    const [isSaving, setIsSaving] = useState(false);
    const [isListening, setIsListening] = useState(null); // e.g., 'up'

    const keyDisplayMap = {
        ' ': 'Space',
    };

    const loadProfile = useCallback(async () => {
        try {
            const profiles = await PlayerProfile.list();
            if (profiles.length > 0) {
                const userProfile = profiles[0];
                setProfile(userProfile);
                if (userProfile.key_bindings) { // Changed this line to fix dependency warning
                    setBindings(userProfile.key_bindings);
                }
            } else {
                // Create a default profile if none exists
                const newProfile = await PlayerProfile.create({ display_name: "New Keeper" });
                setProfile(newProfile);
            }
        } catch (error) {
            console.error("Error loading profile:", error);
        }
    }, []); // Dependency array is empty because 'bindings' is no longer directly used in the conditional assignment.

    useEffect(() => {
        loadProfile();
    }, [loadProfile]);

    const handleKeyDown = useCallback((e) => {
        if (!isListening) return;

        e.preventDefault();
        const key = e.key.toLowerCase();
        setBindings(prev => ({ ...prev, [isListening]: key }));
        setIsListening(null);
    }, [isListening]);

    useEffect(() => {
        window.addEventListener('keydown', handleKeyDown);
        return () => {
            window.removeEventListener('keydown', handleKeyDown);
        };
    }, [handleKeyDown]);

    const saveSettings = async () => {
        if (!profile) return;
        setIsSaving(true);
        try {
            await PlayerProfile.update(profile.id, { key_bindings: bindings });
        } catch (error) {
            console.error("Error saving settings:", error);
        }
        setIsSaving(false);
    };

    const bindingFields = [
        { id: 'up', label: 'Move Up' },
        { id: 'down', label: 'Move Down' },
        { id: 'left', label: 'Move Left' },
        { id: 'right', label: 'Move Right' },
        { id: 'interact', label: 'Interact' },
        { id: 'jump', label: 'Jump / Action' },
    ];

    return (
        <div className="min-h-screen p-6" style={{ background: 'linear-gradient(135deg, #0a0a0f 0%, #1a1a2e 100%)' }}>
            <div className="max-w-3xl mx-auto">
                <motion.div
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    className="flex items-center justify-between mb-8"
                >
                    <div className="flex items-center gap-4">
                        <Button
                            variant="outline"
                            size="icon"
                            onClick={() => navigate(createPageUrl("Dashboard"))}
                            className="hover:bg-white/10"
                        >
                            <ArrowLeft className="w-4 h-4" />
                        </Button>
                        <div>
                            <h1 className="text-3xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-gray-300 to-gray-500">
                                Game Settings
                            </h1>
                            <p className="text-xl" style={{ color: 'var(--text-secondary)' }}>
                                Customize your controls
                            </p>
                        </div>
                    </div>
                    <Button
                        onClick={saveSettings}
                        disabled={isSaving}
                        className="bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700 text-white shadow-lg"
                    >
                        {isSaving ? 'Saving...' : <><Save className="w-4 h-4 mr-2" /> Save</>}
                    </Button>
                </motion.div>

                <motion.div
                    initial={{ opacity: 0, scale: 0.95 }}
                    animate={{ opacity: 1, scale: 1 }}
                    transition={{ delay: 0.1 }}
                >
                    <Card style={{ backgroundColor: 'var(--bg-card)' }} className="border-0">
                        <CardHeader>
                            <CardTitle className="flex items-center gap-2" style={{ color: 'var(--text-primary)' }}>
                                <Key className="w-5 h-5" />
                                Key Bindings
                            </CardTitle>
                        </CardHeader>
                        <CardContent className="space-y-4">
                            {bindingFields.map(({ id, label }) => (
                                <div key={id} className="flex items-center justify-between p-3 rounded-lg bg-white/5">
                                    <Label className="text-lg" style={{ color: 'var(--text-primary)' }}>{label}</Label>
                                    <Button
                                        variant="outline"
                                        className="w-32 text-lg font-mono hover:bg-white/10"
                                        onClick={() => setIsListening(id)}
                                    >
                                        {isListening === id ? 'Press key...' : (keyDisplayMap[bindings[id]] || bindings[id]).toUpperCase()}
                                    </Button>
                                </div>
                            ))}
                        </CardContent>
                    </Card>
                </motion.div>
                 {isListening && (
                    <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50">
                        <div className="bg-gray-800 p-8 rounded-lg shadow-2xl border border-gray-700">
                            <h2 className="text-2xl font-bold text-white">Press any key to bind...</h2>
                        </div>
                    </div>
                )}
            </div>
        </div>
    );
}
