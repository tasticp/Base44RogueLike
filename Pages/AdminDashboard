
import React, { useState, useEffect, useCallback } from "react";
import { GameSession, GameObject, AdminAction, User } from "@/entities/all";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Badge } from "@/components/ui/badge";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { useNavigate } from "react-router-dom";
import { createPageUrl } from "@/utils";
import { motion } from "framer-motion";
import {
  ArrowLeft,
  Monitor,
  MessageSquare,
  Wand2,
  Plus,
  Send,
  Eye,
  Users,
  Activity,
  Zap,
  Crown,
  Target,
  Gem,
  DoorOpen,
  Heart,
  Shield,
  Volume2
} from "lucide-react";

export default function AdminDashboard() {
  const navigate = useNavigate();
  const [activeSessions, setActiveSessions] = useState([]);
  const [selectedSession, setSelectedSession] = useState(null);
  const [sessionObjects, setSessionObjects] = useState([]);
  const [adminForm, setAdminForm] = useState({
    action_type: "speak",
    target_object_id: "",
    message: "",
    transform_to: "",
    position: { x: 10, y: 7 }
  });
  const [isLoading, setIsLoading] = useState(true);
  const [isSending, setIsSending] = useState(false);

  const gameAssets = [
    { id: "trap", name: "Trap", icon: Target, color: "#e53e3e" },
    { id: "npc", name: "NPC", icon: Crown, color: "#38b2ac" },
    { id: "boss", name: "Boss", icon: Crown, color: "#9f7aea" },
    { id: "treasure", name: "Treasure", icon: Gem, color: "#f6ad55" },
    { id: "wall", name: "Wall", icon: Shield, color: "#4a5568" },
    { id: "door", name: "Door", icon: DoorOpen, color: "#4299e1" },
    { id: "crystal", name: "Crystal", icon: Zap, color: "#00d4ff" },
    { id: "torch", name: "Torch", icon: Volume2, color: "#ff6b35" },
    { id: "statue", name: "Statue", icon: Crown, color: "#8b7355" },
    { id: "altar", name: "Altar", icon: Heart, color: "#ff69b4" },
    { id: "portal", name: "Portal", icon: Eye, color: "#9d4edd" }
  ];

  const loadActiveSessions = useCallback(async () => {
    setIsLoading(true);
    try {
      const sessions = await GameSession.filter({ status: "active" });
      setActiveSessions(sessions);
      
      // If no session is selected, select the first one
      if (!selectedSession && sessions.length > 0) {
        setSelectedSession(sessions[0]);
      }
    } catch (error) {
      console.error("Error loading sessions:", error);
    }
    setIsLoading(false);
  }, [selectedSession]);

  const loadSessionObjects = useCallback(async () => {
    if (!selectedSession) return;
    
    try {
      const objects = await GameObject.filter({ session_id: selectedSession.id });
      setSessionObjects(objects);
    } catch (error) {
      console.error("Error loading objects:", error);
    }
  }, [selectedSession]);

  useEffect(() => {
    loadActiveSessions();
    const interval = setInterval(loadActiveSessions, 5000); // Refresh every 5 seconds
    return () => clearInterval(interval);
  }, [loadActiveSessions]); // Added loadActiveSessions to dependencies

  useEffect(() => {
    if (selectedSession) {
      loadSessionObjects();
    }
  }, [selectedSession, loadSessionObjects]); // Added loadSessionObjects to dependencies

  const sendAdminAction = async () => {
    if (!selectedSession) return;
    
    const currentUser = await User.me(); // Moved here as per outline
    
    setIsSending(true);
    try {
      await AdminAction.create({
        session_id: selectedSession.id,
        action_type: adminForm.action_type,
        target_object_id: adminForm.target_object_id || null,
        message: adminForm.message,
        transform_to: adminForm.transform_to || null,
        position: adminForm.action_type === "spawn_object" ? adminForm.position : null,
        admin_name: currentUser.full_name || "Admin"
      });

      // Clear form
      setAdminForm({
        action_type: "speak",
        target_object_id: "",
        message: "",
        transform_to: "",
        position: { x: 10, y: 7 }
      });

      // Refresh objects
      loadSessionObjects();
    } catch (error) {
      console.error("Error sending admin action:", error);
    }
    setIsSending(false);
  };

  const getAssetIcon = (type) => {
    const asset = gameAssets.find(a => a.id === type);
    return asset ? asset.icon : Target;
  };

  const getAssetColor = (type) => {
    const asset = gameAssets.find(a => a.id === type);
    return asset ? asset.color : "#666";
  };

  const getRoleColor = (role) => {
    const colors = {
      trap_setter: "bg-orange-100 text-orange-800",
      healer: "bg-green-100 text-green-800", 
      store_keeper: "bg-blue-100 text-blue-800",
      monster_summoner: "bg-purple-100 text-purple-800",
      boss_reviver: "bg-red-100 text-red-800"
    };
    return colors[role] || "bg-gray-100 text-gray-800";
  };

  const getModeColor = (mode) => {
    const colors = {
      easy_hero_dead: "bg-green-100 text-green-800",
      hard_hero_alive: "bg-red-100 text-red-800",
      nightmare_mode: "bg-purple-100 text-purple-800",
      creative_mode: "bg-blue-100 text-blue-800"
    };
    return colors[mode] || "bg-gray-100 text-gray-800";
  };

  return (
    <div className="min-h-screen p-6" style={{ background: 'linear-gradient(135deg, #0a0a0f 0%, #1a1a2e 100%)' }}>
      <div className="max-w-7xl mx-auto">
        <motion.div 
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className="flex items-center justify-between mb-8"
        >
          <div className="flex items-center gap-4">
            <Button
              variant="outline"
              size="icon"
              onClick={() => navigate(createPageUrl("Dashboard"))}
              className="hover:bg-white/10"
            >
              <ArrowLeft className="w-4 h-4" />
            </Button>
            <div>
              <h1 className="text-3xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-red-400 to-orange-400">
                Dungeon Master Control
              </h1>
              <p className="text-xl" style={{ color: 'var(--text-secondary)' }}>
                Monitor and interact with live game sessions
              </p>
            </div>
          </div>
          
          <Badge variant="outline" className="flex items-center gap-2">
            <Activity className="w-4 h-4" />
            {activeSessions.length} Active Sessions
          </Badge>
        </motion.div>

        <div className="grid lg:grid-cols-4 gap-6">
          {/* Active Sessions List */}
          <motion.div
            initial={{ opacity: 0, x: -20 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ delay: 0.1 }}
            className="space-y-4"
          >
            <Card style={{ backgroundColor: 'var(--bg-card)' }} className="border-0">
              <CardHeader>
                <CardTitle className="flex items-center gap-2" style={{ color: 'var(--text-primary)' }}>
                  <Monitor className="w-5 h-5" />
                  Live Sessions
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-3 max-h-96 overflow-y-auto">
                {activeSessions.length > 0 ? (
                  activeSessions.map((session, index) => (
                    <motion.div
                      key={session.id}
                      initial={{ opacity: 0, y: 10 }}
                      animate={{ opacity: 1, y: 0 }}
                      transition={{ delay: 0.2 + index * 0.1 }}
                      className={`p-3 rounded-lg cursor-pointer transition-all ${
                        selectedSession?.id === session.id 
                          ? 'ring-2 ring-red-500 bg-red-500/10' 
                          : 'hover:bg-white/5'
                      }`}
                      onClick={() => setSelectedSession(session)}
                    >
                      <div className="space-y-2">
                        <div className="flex justify-between items-start">
                          <h4 className="font-medium text-sm" style={{ color: 'var(--text-primary)' }}>
                            Session {session.id.slice(-8)}
                          </h4>
                          <Badge variant="outline" className="text-xs">
                            Score: {session.current_score}
                          </Badge>
                        </div>
                        <div className="flex flex-wrap gap-1">
                          <Badge className={`text-xs ${getRoleColor(session.npc_role)}`}>
                            {session.npc_role?.replace('_', ' ')}
                          </Badge>
                          <Badge className={`text-xs ${getModeColor(session.game_mode)}`}>
                            {session.game_mode?.replace('_', ' ')}
                          </Badge>
                        </div>
                        <p className="text-xs" style={{ color: 'var(--text-secondary)' }}>
                          Time: {Math.floor(session.time_elapsed / 60)}:{(session.time_elapsed % 60).toString().padStart(2, '0')}
                        </p>
                      </div>
                    </motion.div>
                  ))
                ) : (
                  <div className="text-center py-8">
                    <Users className="w-8 h-8 mx-auto mb-2" style={{ color: 'var(--text-secondary)' }} />
                    <p className="text-sm" style={{ color: 'var(--text-secondary)' }}>
                      No active sessions
                    </p>
                  </div>
                )}
              </CardContent>
            </Card>
          </motion.div>

          {/* Session Details & Controls */}
          <motion.div
            initial={{ opacity: 0, scale: 0.95 }}
            animate={{ opacity: 1, scale: 1 }}
            transition={{ delay: 0.2 }}
            className="lg:col-span-3"
          >
            {selectedSession ? (
              <Tabs defaultValue="monitor" className="space-y-4">
                <TabsList className="grid w-full grid-cols-3">
                  <TabsTrigger value="monitor">
                    <Eye className="w-4 h-4 mr-2" />
                    Monitor
                  </TabsTrigger>
                  <TabsTrigger value="interact">
                    <MessageSquare className="w-4 h-4 mr-2" />
                    Interact
                  </TabsTrigger>
                  <TabsTrigger value="control">
                    <Wand2 className="w-4 h-4 mr-2" />
                    Control
                  </TabsTrigger>
                </TabsList>

                <TabsContent value="monitor">
                  <Card style={{ backgroundColor: 'var(--bg-card)' }} className="border-0">
                    <CardHeader>
                      <CardTitle style={{ color: 'var(--text-primary)' }}>
                        Session Overview
                      </CardTitle>
                    </CardHeader>
                    <CardContent className="space-y-4">
                      <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                        <div className="text-center">
                          <p className="text-2xl font-bold" style={{ color: 'var(--accent-primary)' }}>
                            {selectedSession.current_score}
                          </p>
                          <p className="text-sm" style={{ color: 'var(--text-secondary)' }}>Score</p>
                        </div>
                        <div className="text-center">
                          <p className="text-2xl font-bold" style={{ color: 'var(--accent-secondary)' }}>
                            {selectedSession.tasks_completed?.length || 0}
                          </p>
                          <p className="text-sm" style={{ color: 'var(--text-secondary)' }}>Tasks</p>
                        </div>
                        <div className="text-center">
                          <p className="text-2xl font-bold" style={{ color: 'var(--text-primary)' }}>
                            {Math.floor(selectedSession.time_elapsed / 60)}m
                          </p>
                          <p className="text-sm" style={{ color: 'var(--text-secondary)' }}>Time</p>
                        </div>
                        <div className="text-center">
                          <p className="text-2xl font-bold" style={{ color: 'var(--text-primary)' }}>
                            {sessionObjects.length}
                          </p>
                          <p className="text-sm" style={{ color: 'var(--text-secondary)' }}>Objects</p>
                        </div>
                      </div>

                      {/* Objects Grid */}
                      <div>
                        <h4 className="font-medium mb-3" style={{ color: 'var(--text-primary)' }}>
                          Dungeon Objects
                        </h4>
                        <div className="grid grid-cols-2 md:grid-cols-3 gap-3">
                          {sessionObjects.map((object, index) => {
                            const ObjectIcon = getAssetIcon(object.object_type);
                            return (
                              <motion.div
                                key={object.id}
                                initial={{ opacity: 0, scale: 0.9 }}
                                animate={{ opacity: 1, scale: 1 }}
                                transition={{ delay: index * 0.1 }}
                                className="p-3 rounded-lg"
                                style={{ backgroundColor: 'rgba(255,255,255,0.05)' }}
                              >
                                <div className="flex items-center gap-2 mb-2">
                                  <ObjectIcon 
                                    className="w-4 h-4" 
                                    style={{ color: getAssetColor(object.object_type) }} 
                                  />
                                  <span className="text-sm font-medium" style={{ color: 'var(--text-primary)' }}>
                                    {object.object_type}
                                  </span>
                                </div>
                                <div className="flex justify-between text-xs">
                                  <span style={{ color: 'var(--text-secondary)' }}>
                                    ({object.position.x}, {object.position.y})
                                  </span>
                                  <Badge 
                                    variant="outline" 
                                    className={`text-xs ${
                                      object.state === "active" ? "text-green-400" : "text-gray-400"
                                    }`}
                                  >
                                    {object.state}
                                  </Badge>
                                </div>
                                {object.admin_controlled && (
                                  <Badge variant="outline" className="text-xs mt-1">
                                    Admin Controlled
                                  </Badge>
                                )}
                              </motion.div>
                            );
                          })}
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                </TabsContent>

                <TabsContent value="interact">
                  <Card style={{ backgroundColor: 'var(--bg-card)' }} className="border-0">
                    <CardHeader>
                      <CardTitle style={{ color: 'var(--text-primary)' }}>
                        Interact with Player
                      </CardTitle>
                    </CardHeader>
                    <CardContent className="space-y-4">
                      <div className="space-y-2">
                        <Label style={{ color: 'var(--text-primary)' }}>Action Type</Label>
                        <Select 
                          value={adminForm.action_type} 
                          onValueChange={(value) => setAdminForm({...adminForm, action_type: value})}
                        >
                          <SelectTrigger className="bg-white/5 border-white/10">
                            <SelectValue />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="speak">Speak Through Object</SelectItem>
                            <SelectItem value="send_message">Direct Message</SelectItem>
                            <SelectItem value="transform_object">Transform Object</SelectItem>
                            <SelectItem value="spawn_object">Spawn New Object</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>

                      {adminForm.action_type === "speak" && (
                        <div className="space-y-2">
                          <Label style={{ color: 'var(--text-primary)' }}>Select Object to Speak Through</Label>
                          <Select 
                            value={adminForm.target_object_id} 
                            onValueChange={(value) => setAdminForm({...adminForm, target_object_id: value})}
                          >
                            <SelectTrigger className="bg-white/5 border-white/10">
                              <SelectValue placeholder="Choose an object..." />
                            </SelectTrigger>
                            <SelectContent>
                              {sessionObjects.map((object) => (
                                <SelectItem key={object.id} value={object.id}>
                                  {object.object_type} at ({object.position.x}, {object.position.y})
                                </SelectItem>
                              ))}
                            </SelectContent>
                          </Select>
                        </div>
                      )}

                      {(adminForm.action_type === "transform_object" || adminForm.action_type === "spawn_object") && (
                        <div className="space-y-2">
                          <Label style={{ color: 'var(--text-primary)' }}>
                            {adminForm.action_type === "transform_object" ? "Transform Into" : "Object Type"}
                          </Label>
                          <Select 
                            value={adminForm.transform_to} 
                            onValueChange={(value) => setAdminForm({...adminForm, transform_to: value})}
                          >
                            <SelectTrigger className="bg-white/5 border-white/10">
                              <SelectValue placeholder="Select object type..." />
                            </SelectTrigger>
                            <SelectContent>
                              {gameAssets.map((asset) => (
                                <SelectItem key={asset.id} value={asset.id}>
                                  {asset.name}
                                </SelectItem>
                              ))}
                            </SelectContent>
                          </Select>
                        </div>
                      )}

                      {adminForm.action_type === "transform_object" && (
                        <div className="space-y-2">
                          <Label style={{ color: 'var(--text-primary)' }}>Select Object to Transform</Label>
                          <Select 
                            value={adminForm.target_object_id} 
                            onValueChange={(value) => setAdminForm({...adminForm, target_object_id: value})}
                          >
                            <SelectTrigger className="bg-white/5 border-white/10">
                              <SelectValue placeholder="Choose an object..." />
                            </SelectTrigger>
                            <SelectContent>
                              {sessionObjects.map((object) => (
                                <SelectItem key={object.id} value={object.id}>
                                  {object.object_type} at ({object.position.x}, {object.position.y})
                                </SelectItem>
                              ))}
                            </SelectContent>
                          </Select>
                        </div>
                      )}

                      {adminForm.action_type === "spawn_object" && (
                        <div className="grid grid-cols-2 gap-4">
                          <div>
                            <Label style={{ color: 'var(--text-primary)' }}>X Position</Label>
                            <Input
                              type="number"
                              min="0"
                              max="19"
                              value={adminForm.position.x}
                              onChange={(e) => setAdminForm({
                                ...adminForm, 
                                position: {...adminForm.position, x: parseInt(e.target.value)}
                              })}
                              className="bg-white/5 border-white/10"
                            />
                          </div>
                          <div>
                            <Label style={{ color: 'var(--text-primary)' }}>Y Position</Label>
                            <Input
                              type="number"
                              min="0"
                              max="14"
                              value={adminForm.position.y}
                              onChange={(e) => setAdminForm({
                                ...adminForm, 
                                position: {...adminForm.position, y: parseInt(e.target.value)}
                              })}
                              className="bg-white/5 border-white/10"
                            />
                          </div>
                        </div>
                      )}

                      <div className="space-y-2">
                        <Label style={{ color: 'var(--text-primary)' }}>Message</Label>
                        <Textarea
                          value={adminForm.message}
                          onChange={(e) => setAdminForm({...adminForm, message: e.target.value})}
                          placeholder={
                            adminForm.action_type === "speak" 
                              ? "What should the object say?"
                              : "Message to send to player..."
                          }
                          className="bg-white/5 border-white/10"
                        />
                      </div>

                      <Button
                        onClick={sendAdminAction}
                        disabled={isSending || !adminForm.message}
                        className="w-full bg-gradient-to-r from-red-500 to-rose-600 hover:from-red-600 hover:to-rose-700 text-white"
                      >
                        {isSending ? (
                          <>
                            <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2" />
                            Sending...
                          </>
                        ) : (
                          <>
                            <Send className="w-4 h-4 mr-2" />
                            Execute Action
                          </>
                        )}
                      </Button>
                    </CardContent>
                  </Card>
                </TabsContent>

                <TabsContent value="control">
                  <Card style={{ backgroundColor: 'var(--bg-card)' }} className="border-0">
                    <CardHeader>
                      <CardTitle style={{ color: 'var(--text-primary)' }}>
                        Session Controls
                      </CardTitle>
                    </CardHeader>
                    <CardContent className="space-y-4">
                      <div className="grid grid-cols-2 gap-4">
                        <Button variant="outline" className="hover:bg-white/10">
                          Pause Session
                        </Button>
                        <Button variant="outline" className="hover:bg-white/10">
                          End Session
                        </Button>
                        <Button variant="outline" className="hover:bg-white/10">
                          Add Time Bonus
                        </Button>
                        <Button variant="outline" className="hover:bg-white/10">
                          Grant Achievement
                        </Button>
                      </div>
                      
                      <div className="p-4 rounded-lg" style={{ backgroundColor: 'rgba(255,255,255,0.05)' }}>
                        <h4 className="font-medium mb-2" style={{ color: 'var(--text-primary)' }}>
                          Quick Actions
                        </h4>
                        <div className="grid grid-cols-3 gap-2">
                          <Button 
                            size="sm" 
                            variant="outline"
                            onClick={() => setAdminForm({
                              ...adminForm,
                              action_type: "send_message",
                              message: "The dungeon master watches your progress..."
                            })}
                          >
                            Send Encouragement
                          </Button>
                          <Button 
                            size="sm" 
                            variant="outline"
                            onClick={() => setAdminForm({
                              ...adminForm,
                              action_type: "spawn_object",
                              transform_to: "crystal",
                              message: "A mysterious crystal appears!"
                            })}
                          >
                            Spawn Crystal
                          </Button>
                          <Button 
                            size="sm" 
                            variant="outline"
                            onClick={() => setAdminForm({
                              ...adminForm,
                              action_type: "send_message",
                              message: "Danger approaches! Complete your tasks quickly!"
                            })}
                          >
                            Send Warning
                          </Button>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                </TabsContent>
              </Tabs>
            ) : (
              <Card style={{ backgroundColor: 'var(--bg-card)' }} className="border-0">
                <CardContent className="p-12 text-center">
                  <Monitor className="w-16 h-16 mx-auto mb-4" style={{ color: 'var(--text-secondary)' }} />
                  <h3 className="text-xl font-bold mb-2" style={{ color: 'var(--text-primary)' }}>
                    No Session Selected
                  </h3>
                  <p style={{ color: 'var(--text-secondary)' }}>
                    Select an active session from the left panel to begin monitoring and interaction.
                  </p>
                </CardContent>
              </Card>
            )}
          </motion.div>
        </div>
      </div>
    </div>
  );
}
